rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPastor() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role == 'pastor';
    }
    
    function isAdminOrPastor() {
      return isAdmin() || isPastor();
    }
    
    function isMemberOwner(memberId) {
      return isAuthenticated() && request.auth.uid == memberId;
    }
    
    function isValidMemberData() {
      return request.resource.data.keys().hasAll(['firstName', 'lastName']) &&
             (!('role' in request.resource.data) || request.resource.data.role in ['admin', 'pastor', 'member']) &&
             (!('memberStatus' in request.resource.data) || request.resource.data.memberStatus in ['active', 'inactive', 'regular_attender', 'visitor', 'participant', 'not_set']);
    }
    
    function hasRole(roles) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role in roles;
    }
    
    function isValidEventData() {
      return request.resource.data.keys().hasAll(['title', 'startDate', 'endDate', 'eventType', 'isPublic']) &&
             request.resource.data.eventType in ['service', 'bible_study', 'prayer_meeting', 'youth_group', 'seniors_group', 'womens_ministry', 'mens_ministry', 'special_event', 'outreach', 'volunteer_activity', 'board_meeting', 'training', 'other'] &&
             request.resource.data.isPublic is bool &&
             request.resource.data.isActive is bool &&
             (!('requiredRoles' in request.resource.data) || request.resource.data.requiredRoles is list);
    }

    function isValidRSVPData() {
      return request.resource.data.keys().hasAll(['eventId', 'memberId', 'status']) &&
             request.resource.data.status in ['yes', 'no', 'maybe', 'waitlist'] &&
             request.resource.data.numberOfGuests is number &&
             request.resource.data.numberOfGuests >= 0;
    }

    function canReadEvent(eventId) {
      let eventData = get(/databases/$(database)/documents/events/$(eventId)).data;
      return eventData.isPublic == true || 
             hasRole(eventData.requiredRoles) || 
             isAdminOrPastor();
    }

    function isEventCreator(eventId) {
      return get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid;
    }
    
    // Members collection
    match /members/{memberId} {
      // Anyone authenticated can read member profiles
      allow read: if isAuthenticated();
      
      // Members can update their own profile, admins/pastors can update any
      allow update: if isMemberOwner(memberId) || isAdminOrPastor();
      
      // Only admins/pastors can create new members
      allow create: if isAdminOrPastor() && isValidMemberData();
      
      // Only admins can delete members
      allow delete: if isAdmin();
      
      // Status history subcollection
      match /statusHistory/{historyId} {
        allow read: if isAuthenticated() && 
          (resource.data.changedBy == request.auth.uid || 
           hasRole(['admin', 'pastor']) ||
           memberId == request.auth.uid);
        
        allow create: if isAuthenticated() && 
          hasRole(['admin', 'pastor']) &&
          request.resource.data.keys().hasAll(['memberId', 'previousStatus', 'newStatus', 'changedBy', 'changedByName', 'changedAt']) &&
          request.resource.data.changedBy == request.auth.uid;
        
        allow update, delete: if false; // History should be immutable
      }
    }
    
    // Households collection  
    match /households/{householdId} {
      // Anyone authenticated can read household info
      allow read: if isAuthenticated();
      
      // Only admins/pastors can modify households
      allow write: if isAdminOrPastor();
    }
    
    // Registration Tokens collection - QR Self-Registration System
    match /registration_tokens/{tokenId} {
      // Anyone can read tokens (needed for public validation)
      allow read: if true;
      
      // Only admins/pastors can create/update/delete tokens
      allow write: if isAdminOrPastor();
    }
    
    // Pending Registrations collection - QR Self-Registration System
    match /pending_registrations/{registrationId} {
      // Anyone can create registrations (unauthenticated public access)
      allow create: if true;
      
      // Only admins/pastors can read/update/delete registrations
      allow read, update, delete: if isAdminOrPastor();
    }
    
    // Notes subcollection - Pastoral Care Security
    match /members/{memberId}/notes/{noteId} {
      allow read: if isAuthenticated() && 
        hasRole(['admin', 'pastor']) &&
        (resource.data.isPrivate == false || 
         resource.data.createdBy == request.auth.uid || 
         hasRole(['admin']));
      
      allow create: if isAuthenticated() && 
        hasRole(['admin', 'pastor']) &&
        request.resource.data.keys().hasAll(['memberId', 'title', 'content', 'category', 'priority', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      
      allow update: if isAuthenticated() && 
        hasRole(['admin', 'pastor']) &&
        (resource.data.createdBy == request.auth.uid || hasRole(['admin']));
      
      allow delete: if isAuthenticated() && 
        hasRole(['admin', 'pastor']) &&
        (resource.data.createdBy == request.auth.uid || hasRole(['admin']));
    }

    // Communications subcollection - Member Interaction Logging
    match /members/{memberId}/communications/{commId} {
      allow read, create: if isAuthenticated() && 
        hasRole(['admin', 'pastor']);
      
      allow update, delete: if isAuthenticated() && 
        hasRole(['admin']) ||
        (hasRole(['pastor']) && resource.data.recordedBy == request.auth.uid);
    }
    
    // Events collection
    match /events/{eventId} {
      // Read access rules
      allow read: if isAuthenticated() && (
        // Public events readable by all
        resource.data.isPublic == true ||
        // Private events readable by required roles
        hasRole(resource.data.requiredRoles) ||
        // Admin/pastor can read all events
        isAdminOrPastor()
      );
      
      // Write access rules
      allow create: if isAdminOrPastor() && 
        isValidEventData() &&
        request.resource.data.createdBy == request.auth.uid;
        
      allow update: if isAdminOrPastor() && 
        isValidEventData() &&
        // Preserve original creator
        request.resource.data.createdBy == resource.data.createdBy;
        
      allow delete: if isAdminOrPastor();
      
      // RSVP subcollection
      match /rsvps/{rsvpId} {
        // Members can read RSVPs for events they can access
        allow read: if isAuthenticated() && (
          // Can read own RSVP
          resource.data.memberId == request.auth.uid ||
          // Admin/pastor can read all RSVPs
          isAdminOrPastor() ||
          // Event creators can read RSVPs
          get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid
        );
        
        // RSVP creation rules
        allow create: if isAuthenticated() && 
          isValidRSVPData() &&
          request.resource.data.memberId == request.auth.uid &&
          // Can only RSVP to events you can read
          canReadEvent(eventId);
          
        // RSVP update rules
        allow update: if isAuthenticated() && (
          // Members can update their own RSVPs
          (resource.data.memberId == request.auth.uid && 
           request.resource.data.memberId == request.auth.uid) ||
          // Admin/pastor can update any RSVP
          isAdminOrPastor()
        ) && isValidRSVPData();
        
        // RSVP deletion rules
        allow delete: if isAuthenticated() && (
          resource.data.memberId == request.auth.uid ||
          isAdminOrPastor()
        );
      }
      
      // Attendance subcollection
      match /attendance/{attendanceId} {
        // Only admin/pastor can access attendance data
        allow read, write: if isAdminOrPastor();
      }
    }
    
    // Collection group for RSVP queries across events
    match /{path=**}/rsvps/{rsvpId} {
      allow read: if isAuthenticated() && (
        resource.data.memberId == request.auth.uid ||
        isAdminOrPastor()
      );
    }

    // Collection group for attendance queries across events
    match /{path=**}/attendance/{attendanceId} {
      allow read: if isAdminOrPastor();
    }
    
    // Default rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}