rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPastor() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role == 'pastor';
    }
    
    function isAdminOrPastor() {
      return isAdmin() || isPastor();
    }
    
    function isMemberOwner(memberId) {
      return isAuthenticated() && request.auth.uid == memberId;
    }
    
    function isValidMemberData() {
      return request.resource.data.keys().hasAll(['firstName', 'lastName']) &&
             (!('role' in request.resource.data) || request.resource.data.role in ['admin', 'pastor', 'member']) &&
             (!('memberStatus' in request.resource.data) || request.resource.data.memberStatus in ['active', 'inactive', 'regular_attender', 'visitor', 'participant', 'not_set']);
    }
    
    function hasRole(roles) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role in roles;
    }
    
    // Members collection
    match /members/{memberId} {
      // Anyone authenticated can read member profiles
      allow read: if isAuthenticated();
      
      // Members can update their own profile, admins/pastors can update any
      allow update: if isMemberOwner(memberId) || isAdminOrPastor();
      
      // Only admins/pastors can create new members
      allow create: if isAdminOrPastor() && isValidMemberData();
      
      // Only admins can delete members
      allow delete: if isAdmin();
      
      // Status history subcollection
      match /statusHistory/{historyId} {
        allow read: if isAuthenticated() && 
          (resource.data.changedBy == request.auth.uid || 
           hasRole(['admin', 'pastor']) ||
           memberId == request.auth.uid);
        
        allow create: if isAuthenticated() && 
          hasRole(['admin', 'pastor']) &&
          request.resource.data.keys().hasAll(['memberId', 'previousStatus', 'newStatus', 'changedBy', 'changedByName', 'changedAt']) &&
          request.resource.data.changedBy == request.auth.uid;
        
        allow update, delete: if false; // History should be immutable
      }
    }
    
    // Households collection  
    match /households/{householdId} {
      // Anyone authenticated can read household info
      allow read: if isAuthenticated();
      
      // Only admins/pastors can modify households
      allow write: if isAdminOrPastor();
    }
    
    // Registration Tokens collection - QR Self-Registration System
    match /registration_tokens/{tokenId} {
      // Anyone can read tokens (needed for public validation)
      allow read: if true;
      
      // Only admins/pastors can create/update/delete tokens
      allow write: if isAdminOrPastor();
    }
    
    // Pending Registrations collection - QR Self-Registration System
    match /pending_registrations/{registrationId} {
      // Anyone can create registrations (unauthenticated public access)
      allow create: if true;
      
      // Only admins/pastors can read/update/delete registrations
      allow read, update, delete: if isAdminOrPastor();
    }
    
    // Default rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}